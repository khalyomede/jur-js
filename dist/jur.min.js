'use strict';var Jur=function(){function Jur(){this.ERR_RESPONSE_NOT_PARSED_YET='Unable to access the property of the response before without parsing it.';this.ERR_UNIT_NOT_SUPPORTED='this unit is not supported.';this.ERR_ISSUED_TIME_NOT_SET='The issued time should be initialized first.';this.UNIT_MICROSECOND='microsecond';this.UNIT_MILLISECOND='millisecond';this.UNIT_SECOND='second';this.issued_at=null;this.response={}}Jur.prototype.issued=function(){this.issued_at=this.timestampInMicroseconds();return this};Jur.prototype.parse=function(json){this.response=JSON.parse(json);this.validateResponse();return this};Jur.prototype.validateResponse=function(){var required=['message','data','request','debug'];for(var _i=0,required_1=required;_i<required_1.length;_i++){var key=required_1[_i];if(key in this.response===false){throw new Error('The response is not a valid JUR (the attribute "'+key+'" is missing from the response).')}}required=['elapsed','issued_at','resolved_at'];for(var _a=0,required_2=required;_a<required_2.length;_a++){var key=required_2[_a];if(key in this.response['debug']===false){throw new Error('The response is not a valid JUR (the attribute "'+key+'" is missing from the attribute "debug").')}}var stringOrNull=['message'];for(var _b=0,stringOrNull_1=stringOrNull;_b<stringOrNull_1.length;_b++){var key=stringOrNull_1[_b];if(this.response[key]!==null&&(this.response[key]===undefined||this.response[key].constructor!==String)){throw new Error('The response is not a valid JUR (the attribute "'+key+'" must be either a string or null).')}}var types=['get','post','put','patch','delete'];if(types.indexOf(this.response['request'])===-1){throw new Error('The response is not a valid JUR (the attribute "debug" must have one of the following value: '+types.join(', ')+').')}var numbers=['elapsed','issued_at','resolved_at'];for(var _c=0,numbers_1=numbers;_c<numbers_1.length;_c++){var key=numbers_1[_c];if(this.response['debug'][key]===null||this.response['debug'][key]===undefined||this.response['debug'][key].constructor!==Number){throw new Error('The response is not a valid JUR (the attribute "'+key+'" of the attribute "debug" must be a number).')}}};Jur.prototype.message=function(){this.checkResponseParsed();return this.response['message']};Jur.prototype.request=function(){this.checkResponseParsed();return this.response['request']};Jur.prototype.data=function(){this.checkResponseParsed();return this.response['data']};Jur.prototype.elapsed=function(unit){if(unit===void 0){unit=this.UNIT_MICROSECOND}return this.debugTime('elapsed',unit)};Jur.prototype.issuedAt=function(unit){if(unit===void 0){unit=this.UNIT_MICROSECOND}return this.debugTime('issued_at',unit)};Jur.prototype.resolvedAt=function(unit){if(unit===void 0){unit=this.UNIT_MICROSECOND}return this.debugTime('resolved_at',unit)};Jur.prototype.toObject=function(){this.checkResponseParsed();return this.response};Jur.prototype.latency=function(unit){if(unit===void 0){unit=this.UNIT_MICROSECOND}this.checkResponseParsed();this.checkIssuedTimeFilled();this.checkTimeUnitValid(unit);var latency=this.issued_at-this.response['debug']['issued_at'];return this.convertTimeUnit(latency,unit)};Jur.prototype.checkIssuedTimeFilled=function(){if(this.issued_at===null){throw new Error(this.ERR_ISSUED_TIME_NOT_SET)}};Jur.prototype.debugTime=function(key,unit){this.checkResponseParsed();this.checkTimeUnitValid(unit);var time=this.response['debug'][key];return this.convertTimeUnit(time,unit)};Jur.prototype.convertTimeUnit=function(time,unit){var _time=time;switch(unit){case this.UNIT_MILLISECOND:_time/=1000;break;case this.UNIT_SECOND:_time/=1000000;break;}return Math.round(_time)};Jur.prototype.checkTimeUnitValid=function(unit){if(this.supportedUnits().indexOf(unit.toLowerCase())===-1){throw new Error(this.ERR_UNIT_NOT_SUPPORTED)}};Jur.prototype.supportedUnits=function(){return[this.UNIT_MICROSECOND,this.UNIT_MILLISECOND,this.UNIT_SECOND]};Jur.prototype.checkResponseParsed=function(){if(Object.keys(this.response).length===0){throw new Error(this.ERR_RESPONSE_NOT_PARSED_YET)}};Jur.prototype.timestampInMicroseconds=function(){return new Date().getTime()*1000};return Jur}();